module logic_circuit(
    input wire X1, X2, X3, X4,  // Inputs
    output wire out_Final       // Final output
);

    // Intermediate wires
    wire not_X2, not_X3;
    wire out_and1, out_and2, out_and3;
    wire out_or1, out_or2, out_or3;
    wire g, f, h;

    // NOT gates
    assign not_X2 = ~X2;
    assign not_X3 = ~X3;

    // AND gates
    assign out_and1 = X1 & X3;
    assign out_and2 = X2 & X4;
    assign out_and3 = not_X2 & not_X3;

    // OR gates
    assign out_or1 = not_X3 | X4;
    assign out_or2 = X1 | not_X2;
    assign out_or3 = out_and1 | out_and2;

    // Final logic for g, f, h
    assign g = out_or3;
    assign f = out_or1;
    assign h = out_and3 & out_or2;

    // Final OR gate for the final output
    assign out_Final = g | f | h;

endmodule
Testbench:
module tb_logic_circuit;

    // Declare input variables (as reg) and output (as wire)
    reg X1, X2, X3, X4;  // Inputs to be driven by the testbench
    wire out_Final;      // Output to be observed

    // Instantiate the module under test (logic_circuit)
    logic_circuit uut (
        .X1(X1), 
        .X2(X2), 
        .X3(X3), 
        .X4(X4), 
        .out_Final(out_Final)
    );

    // Testbench procedure to apply stimulus
    initial begin
        // Test case 1: All inputs are 0
        X1 = 0; X2 = 0; X3 = 0; X4 = 0;
        #10;  // Wait for 10 time units
        $display("X1=%b, X2=%b, X3=%b, X4=%b => out_Final=%b", X1, X2, X3, X4, out_Final);

        // Test case 2: Random combination
        X1 = 0; X2 = 1; X3 = 0; X4 = 1;
        #10;
        $display("X1=%b, X2=%b, X3=%b, X4=%b => out_Final=%b", X1, X2, X3, X4, out_Final);

        // Test case 3: Another combination
        X1 = 1; X2 = 0; X3 = 1; X4 = 1;
        #10;
        $display("X1=%b, X2=%b, X3=%b, X4=%b => out_Final=%b", X1, X2, X3, X4, out_Final);

        // Test case 4: All inputs are 1
        X1 = 1; X2 = 1; X3 = 1; X4 = 1;
        #10;
        $display("X1=%b, X2=%b, X3=%b, X4=%b => out_Final=%b", X1, X2, X3, X4, out_Final);

        // Additional test cases can be added as needed

        // Stop simulation after the tests
        $stop;
    end

endmodule